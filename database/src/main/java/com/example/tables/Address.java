/*
 * This file is generated by jOOQ.
 */
package com.example.tables;


import com.example.Indexes;
import com.example.Keys;
import com.example.Work;
import com.example.tables.records.AddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 住所
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1982460942;

    /**
     * The reference instance of <code>work.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>work.address.prefecture_cd</code>. 都道府県コード
     */
    public final TableField<AddressRecord, String> PREFECTURE_CD = createField("prefecture_cd", org.jooq.impl.SQLDataType.CHAR(2).nullable(false), this, "都道府県コード");

    /**
     * The column <code>work.address.prefecture_name</code>. 都道府県名
     */
    public final TableField<AddressRecord, String> PREFECTURE_NAME = createField("prefecture_name", org.jooq.impl.SQLDataType.VARCHAR(191), this, "都道府県名");

    /**
     * The column <code>work.address.city_cd</code>. 市区町村コード
     */
    public final TableField<AddressRecord, String> CITY_CD = createField("city_cd", org.jooq.impl.SQLDataType.CHAR(5).nullable(false), this, "市区町村コード");

    /**
     * The column <code>work.address.city_name</code>. 市区町村名
     */
    public final TableField<AddressRecord, String> CITY_NAME = createField("city_name", org.jooq.impl.SQLDataType.VARCHAR(191), this, "市区町村名");

    /**
     * The column <code>work.address.town_street_cd</code>. 大字町丁目コード
     */
    public final TableField<AddressRecord, String> TOWN_STREET_CD = createField("town_street_cd", org.jooq.impl.SQLDataType.CHAR(12).nullable(false), this, "大字町丁目コード");

    /**
     * The column <code>work.address.town_street_name</code>. 大字町丁目名
     */
    public final TableField<AddressRecord, String> TOWN_STREET_NAME = createField("town_street_name", org.jooq.impl.SQLDataType.VARCHAR(191), this, "大字町丁目名");

    /**
     * The column <code>work.address.latitude</code>. 緯度
     */
    public final TableField<AddressRecord, Double> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DOUBLE, this, "緯度");

    /**
     * The column <code>work.address.longitude</code>. 経度
     */
    public final TableField<AddressRecord, Double> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DOUBLE, this, "経度");

    /**
     * The column <code>work.address.origin_doc_cd</code>. 原典資料コード
     */
    public final TableField<AddressRecord, String> ORIGIN_DOC_CD = createField("origin_doc_cd", org.jooq.impl.SQLDataType.CHAR(1), this, "原典資料コード");

    /**
     * The column <code>work.address.town_street_kbn_cd</code>. 大字・字・丁目区分コード
     */
    public final TableField<AddressRecord, String> TOWN_STREET_KBN_CD = createField("town_street_kbn_cd", org.jooq.impl.SQLDataType.CHAR(1), this, "大字・字・丁目区分コード");

    /**
     * Create a <code>work.address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    /**
     * Create an aliased <code>work.address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>work.address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("住所"));
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Work.WORK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESS_IDX1, Indexes.ADDRESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.KEY_ADDRESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.KEY_ADDRESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.ADDRESS_IBFK_1);
    }

    public Prefecture prefecture() {
        return new Prefecture(this, Keys.ADDRESS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }
}
