/*
 * This file is generated by jOOQ.
 */
package com.example.tables;


import com.example.Indexes;
import com.example.Keys;
import com.example.Work;
import com.example.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * ユーザ
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 692135868;

    /**
     * The reference instance of <code>work.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>work.user.user_id</code>. ユーザid
     */
    public final TableField<UserRecord, ULong> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "ユーザid");

    /**
     * The column <code>work.user.user_name</code>. ユーザ名
     */
    public final TableField<UserRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false), this, "ユーザ名");

    /**
     * The column <code>work.user.user_password</code>. パスワード
     */
    public final TableField<UserRecord, String> USER_PASSWORD = createField("user_password", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false), this, "パスワード");

    /**
     * The column <code>work.user.role_cd</code>. 役割コード
     */
    public final TableField<UserRecord, UShort> ROLE_CD = createField("role_cd", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "役割コード");

    /**
     * The column <code>work.user.credentials_expired_flg</code>. 権限期限切れフラグ
     */
    public final TableField<UserRecord, Boolean> CREDENTIALS_EXPIRED_FLG = createField("credentials_expired_flg", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "権限期限切れフラグ");

    /**
     * The column <code>work.user.account_expired_flg</code>. アカウント期限切れフラグ
     */
    public final TableField<UserRecord, Boolean> ACCOUNT_EXPIRED_FLG = createField("account_expired_flg", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "アカウント期限切れフラグ");

    /**
     * The column <code>work.user.account_locked_flg</code>. アカウント停止フラグ
     */
    public final TableField<UserRecord, Boolean> ACCOUNT_LOCKED_FLG = createField("account_locked_flg", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "アカウント停止フラグ");

    /**
     * The column <code>work.user.enabled_flg</code>. 有効フラグ
     */
    public final TableField<UserRecord, Boolean> ENABLED_FLG = createField("enabled_flg", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "有効フラグ");

    /**
     * The column <code>work.user.created_at</code>. 作成日時
     */
    public final TableField<UserRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "作成日時");

    /**
     * The column <code>work.user.updated_at</code>. 更新日時
     */
    public final TableField<UserRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新日時");

    /**
     * Create a <code>work.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>work.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>work.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ユーザ"));
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Work.WORK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PRIMARY, Indexes.USER_ROLE_CD, Indexes.USER_UQ1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, ULong> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY, Keys.KEY_USER_UQ1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserRecord, ?>>asList(Keys.USER_IBFK_1);
    }

    public Role role() {
        return new Role(this, Keys.USER_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }
}
