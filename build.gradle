buildscript {
  ext {
    jdkVersion = getProperty("jdk.version")
    kotlinVersion = getProperty("kotlin.version")
    kotlinCoroutinesVersion = getProperty("kotlinx.coroutines.version")
    springBootVersion = getProperty("spring.boot.version")
    springCloudVersion = getProperty("spring.cloud.version")
    mysqlConnectorJavaVersion = getProperty("mysql.connector.java.version")
    commonsDbcp2Version = getProperty("commons.dbcp2.version")
    awsSdkVersion = getProperty("aws.sdk.version")
    thymeleafLayoutDialectVersion = getProperty("thymeleaf.layout.dialect.version")
    thymeleafExtrasThymeleafExtrasJava8timeVersion = getProperty("thymeleaf.extras.thymeleaf-extras-java8time.version")
    thymeleafExtrasSpringsecurity5Version = getProperty("thymeleaf.extras.springsecurity5.version")
    superCsvVersion = getProperty("super-csv.version")
    superCsvAnnotationVersion = getProperty("super-csv-annotation.version")
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-snapshot' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
  }
}

apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = jdkVersion

allprojects {
  apply plugin: 'maven'
  apply plugin: 'java-library'
  apply plugin: 'kotlin'
  apply plugin: 'kotlin-spring'
  apply plugin: 'idea'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  repositories {
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
  }

  dependencies {
    // kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinCoroutinesVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-redis-reactive:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-jooq:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    // spring
    implementation("org.springframework.session:spring-session-data-redis:${springBootVersion}")
    // cloud
    implementation("org.springframework.cloud:spring-cloud-starter-aws:${springCloudVersion}")
    // datasource
    implementation("org.apache.commons:commons-dbcp2:${commonsDbcp2Version}")
    // aws sdk
    implementation("com.amazonaws:aws-java-sdk-sts:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-s3:${awsSdkVersion}")
    implementation("com.amazonaws:aws-java-sdk-ses:${awsSdkVersion}")
    // template engine
    implementation("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:${thymeleafLayoutDialectVersion}")
    implementation("org.thymeleaf.extras:thymeleaf-extras-java8time:${thymeleafExtrasThymeleafExtrasJava8timeVersion}")
    implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity5:${thymeleafExtrasSpringsecurity5Version}")
    // driver
    runtime("mysql:mysql-connector-java:${mysqlConnectorJavaVersion}")
    // csv
    implementation("net.sf.supercsv:super-csv:${superCsvVersion}")
    implementation("com.github.mygreen:super-csv-annotation:${superCsvAnnotationVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.springframework.security:spring-security-test")
  }

  configurations {
    all*.exclude module: 'slf4j-jdk12'
    all*.exclude module: 'slf4j-jdk14'
    all*.exclude module: 'commons-logging'
    all*.exclude module: 'log4j'
  }

  compileKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = "1.8"
    }
  }
  compileTestKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = "1.8"
    }
  }
}

project(':database') {
  bootJar.enabled = false
  jar.enabled = true
  dependencies {
    // database migration
    implementation("org.liquibase:liquibase-core")
  }
}

project(':base') {
  dependencies {
    api project(':database')
  }
  bootJar.enabled = false
  jar.enabled = true
}

project(':api') {
  dependencies {
    implementation project(':base')
  }
  bootJar {
    launchScript()
  }
}

project(':batch') {
  dependencies {
    implementation project(':base')
    implementation('org.springframework.boot:spring-boot-starter-batch')
    testImplementation('org.springframework.batch:spring-batch-test')
  }
  bootJar {
    launchScript()
  }
}

project(':admin') {
  dependencies {
    implementation project(':base')
  }
  bootJar {
    launchScript()
  }
}
